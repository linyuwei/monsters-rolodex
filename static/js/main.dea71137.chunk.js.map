{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCNSC,G,MAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEC,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0DCG,G,wDA1Db,aAAe,IAAD,8BACZ,gBAgBFH,aAAe,SAAAI,GACb,OAAO,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAf7C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOjC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,mBACZC,aAAce,KAAKf,eAKrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dea71137.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card-styles.css'\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    <img \r\n      alt='monster' \r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n  </div>\r\n)","import React from 'react'\r\nimport { Card } from '../card/card.component'\r\n\r\nimport './card-list-styles.css'\r\n\r\nexport const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} /> // pass data to Card component\r\n      // <h1 key={monster.id}> {monster.name} </h1>\r\n    ))}\r\n  </div> \r\n  // console.log(props) // {}\r\n  // return <div className='card-list'>{props.children}</div> // SeanLin\r\n)","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n  <input \r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n      // onChange={this.setState({searchField: e.target.value})}\r\n      // onChange={e => console.log(e.target.value)}>\r\n  />\r\n)\r\n ","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n// import logo from './logo.svg'; // logo is variable\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()    \n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    // .then(response => console.log(response))\n    .then(response => response.json())\n    // .then(users => console.log(users))\n    .then( users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => {\n    return this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state // to keep this.state data original instead use variables.\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox \n          placeholder='search omonsters'\n          handleChange={this.handleChange}\n          // handleChange={this.setState({ searchField: e.target.value }}\n        />\n        {/* onChange={e => console.log(e.target.value)}> */}\n        {/* SyntheticBaseEvent {_reactName: \"onChange\", _targetInst: null, type: \"change\", nativeEvent: InputEvent, target: input, …} */}\n        <CardList monsters={filteredMonsters}>\n        {/* <CardList monsters={this.state.monsters}> */}\n          {/* <h1>SeanLin</h1> */}\n        </CardList>\n      </div>\n    )\n  }\n}\n\n// same as\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//        <p>{ this.state.string }</p>\n//        <button onClick={() => this.setState({ string: 'Gal'})}>Clcik Me</button>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') // find the DOM and replace it by component.\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}